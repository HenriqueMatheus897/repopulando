/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visão;

import java.awt.List;
import java.awt.event.KeyEvent;
import java.util.Scanner;

import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import metodos.MetodoRegistroDeCompra;
//import javax.swing.table.DefaultTableModel;

//import com.sun.xml.internal.bind.v2.schemagen.xmlschema.ExplicitGroup;
//import javax.swing.JOptionPane;

public class TelaRelatorioCistema extends javax.swing.JFrame {

    private  static String nome,data,hora,valor;
    
    public TelaRelatorioCistema() {
        initComponents();
        
        
        
        
     //   jButton1.setBackground(new java.awt.Color(0,0,0,0));
     //   jButton2.setBackground(new java.awt.Color(0,0,0,0));
       // jButton3.setBackground(new java.awt.Color(0,0,0,0));
       // jButton4.setBackground(new java.awt.Color(0,0,0,0));
   //     jButton5.setBackground(new java.awt.Color(0,0,0,0));
       // jPanel6.setBackground(new java.awt.Color(0,0,0,0));
       jButton2.setBackground(new java.awt.Color(0,0,0,0));
       jButton4.setBackground(new java.awt.Color(0,0,0,0));
       jButton1.setBackground(new java.awt.Color(0,0,0,0));
       jButton3.setBackground(new java.awt.Color(0,0,0,0));
       jButton5.setBackground(new java.awt.Color(0,0,0,0));
       jButton7.setBackground(new java.awt.Color(0,0,0,0));
       //jButton2.setBackground(new java.awt.Color(0,0,0,0));
 
    }
    
    private void calcular()
    {
        
     // fuçao para caucular o subtotal 
        float suma = 0;
        for( int i = 0; i < jTable2.getRowCount(); i++)
        {
            float renglon;
            renglon = Float.parseFloat(jTable2.getValueAt(i, 0).toString());
            
            suma = suma + renglon;
            
        }

         jLabel68.setText(String.valueOf(suma));
         jTextField2.setText(String.valueOf(suma));
  
    }
    private void calcular2()
    {
        
     // fuçao para caucular o subtotal 
        float suma = 0;
        for( int i = 0; i < jTable3.getRowCount(); i++)
        {
            float renglon;
            renglon = Float.parseFloat(jTable3.getValueAt(i, 3).toString());
            
            suma = suma + renglon;
            
        }

         jLabel68.setText(String.valueOf(suma));
        
  
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel68 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPiorHora2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(120, 360, 180, 30);

        jPanel3.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(330, 250, 0, 0);

        jPanel4.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(1080, 230, 0, 0);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(120, 270, 180, 30);

        jPanel5.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5);
        jPanel5.setBounds(1080, 200, 0, 10);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(120, 320, 190, 30);

        jTextField1.setBorder(null);
        getContentPane().add(jTextField1);
        jTextField1.setBounds(250, 80, 0, 30);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 700, 10, 0);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel4.setText("0");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(780, 180, 80, 44);

        jTextField2.setBorder(null);
        getContentPane().add(jTextField2);
        jTextField2.setBounds(340, 510, 0, 40);
        getContentPane().add(jLabel8);
        jLabel8.setBounds(480, 240, 0, 10);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(50, 560, 0, 10);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Hora", "Nome Do Cliente", "Valor Gasto Pelo Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setMinWidth(120);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(120);
            jTable3.getColumnModel().getColumn(1).setMinWidth(120);
            jTable3.getColumnModel().getColumn(1).setPreferredWidth(120);
            jTable3.getColumnModel().getColumn(1).setMaxWidth(120);
            jTable3.getColumnModel().getColumn(3).setMinWidth(200);
            jTable3.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable3.getColumnModel().getColumn(3).setMaxWidth(200);
        }

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(380, 320, 860, 340);

        jLabel68.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel68.setText("0");
        getContentPane().add(jLabel68);
        jLabel68.setBounds(990, 180, 80, 44);

        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(353, 220, 1, 1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("0");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(570, 180, 70, 44);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(350, 180, 0, 0);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(350, 140, 0, 0);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(java.awt.Color.white);
        jLabel10.setText("Digite uma data especifica");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(120, 414, 170, 20);
        getContentPane().add(jLabel5);
        jLabel5.setBounds(350, 160, 0, 0);
        getContentPane().add(jLabel6);
        jLabel6.setBounds(344, 174, 0, 20);
        getContentPane().add(jLabel7);
        jLabel7.setBounds(350, 200, 0, 0);

        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(110, 200, 200, 30);

        jButton7.setBackground(new java.awt.Color(0, 15, 34));
        jButton7.setBorder(null);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(310, 440, 40, 30);

        try {
            jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        getContentPane().add(jFormattedTextField1);
        jFormattedTextField1.setBounds(120, 440, 180, 30);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("titulo");
        jLabel9.setToolTipText("");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(700, 50, 440, 30);

        txtPiorHora2.setText("jLabel9");
        getContentPane().add(txtPiorHora2);
        txtPiorHora2.setBounds(1080, 440, 34, 14);
        getContentPane().add(jLabel18);
        jLabel18.setBounds(0, 0, 0, 0);

        jButton2.setToolTipText("Sair Dessa Aba");
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(1270, 0, 40, 40);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/__RELATORIO_1.png"))); // NOI18N
        jLabel11.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel11MouseMoved(evt);
            }
        });
        getContentPane().add(jLabel11);
        jLabel11.setBounds(0, 0, 1330, 703);

        setSize(new java.awt.Dimension(1312, 704));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
 jLabel9.setText("Faturamento total");
        try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                    
                                               
                    linha.trim();
                    System.out.println(linha);
                    //Metodo de formataçao de String
                    String space = " ";
                    if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                        //Metodo quebra Strig
                    String a = linha;
	            String[] array = a.split(" ");
	            for (int ij = 0; ij < array.length; ij++){
		    System.out.println(array[0]);//Valor
                     System.out.println(array[1]);//Hora
                      System.out.println(array[2]);//Nome
                       System.out.println(array[3]);//Data
                       
                        
                       
	}
                    DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                        val.addRow(new String[]{array[3], array[1], array[2], array[0]} );
                    
                    }
                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }         
        calcular2();
                 
        
        
        //outro metodo
        String filePathr = ("C:\\Arquivos de Programas/Gestão de Clientes/faturamentoDia.txt");
        File fillle = new File(filePathr);
        
        LineNumberReader lnrt = null;
        try {
            
            File file = new File(filePathr);
            lnrt = new LineNumberReader(new FileReader(file));
            try {
                lnrt.skip(Long.MAX_VALUE);
            } catch (IOException ex) {
                Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
            }
            int retorno = lnrt.getLineNumber();
            int REs = retorno - 0;
            String rere = Integer.toString(REs);
            jLabel4.setText(rere);
            
            
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        try {
			//abre o arquivo
			FileReader fr = new FileReader("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
			BufferedReader br = new BufferedReader(fr);
			String temp;
			//A cada interação, é uma linha do arquivo e atribui-a a temp
			while ((temp = br.readLine()) != null)
			{
				//Aqui gera a sua "lista". No caso, imprimi cada linha na tela.
				String[] a = temp.split(";");
				int i=0;
				for(String each : a)
				{
					/*if(i==0){
						nome=each;							
						System.out.println(nome);
					}*/
						/*if(i==1){
							data=each;
							//System.out.println(data);
                                                        jLabel9.setText(data);
						} 
						if(i==2){
							hora=each;
							i=-1;
							//System.out.println(hora);
                                                        txtMelhorHora.setText(hora);
                                                        
                                                        }*/
                                                if(i==1){
                                                        nome=each;
                                                        i=-1;
                                                       //System.out.println(TOt);
                                                     //   jLabel18.setText("nome");
                                                       // jLabel21.setText("nome");
                                                
                                                }
                                                        
						i++;
					}						
				}
		}
		catch (FileNotFoundException el)
		{
			System.out.println("Arquivo não Encontrado!");
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
        
        // VALOR 
        try {
			//abre o arquivo
			FileReader fr = new FileReader("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
			BufferedReader br = new BufferedReader(fr);
			String temp;
			//A cada interação, é uma linha do arquivo e atribui-a a temp
			while ((temp = br.readLine()) != null)
			{
				//Aqui gera a sua "lista". No caso, imprimi cada linha na tela.
				String[] a = temp.split(";");
				int i=0;
				for(String each : a)
				{
					/*if(i==0){
						nome=each;							
						System.out.println(nome);
					}*/
						/*if(i==1){
							data=each;
							//System.out.println(data);
                                                        jLabel9.setText(data);
						} 
						if(i==2){
							hora=each;
							i=-1;
							//System.out.println(hora);
                                                        txtMelhorHora.setText(hora);
                                                        
                                                        }*/
                                                if(i==9){
                                                        valor=each;
                                                        i=-1;
                                                       //System.out.println(TOt);
                                                      //  jLabel68.setText(valor);
                                                
                                                }
                                                        
						i++;
					}						
				}
		}
		catch (FileNotFoundException el)
		{
			System.out.println("Arquivo não Encontrado!");
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}


        // MELHOR HORA
        try {
			//abre o arquivo
			FileReader fr = new FileReader("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
			BufferedReader br = new BufferedReader(fr);
			String temp;
			//A cada interação, é uma linha do arquivo e atribui-a a temp
			while ((temp = br.readLine()) != null)
			{
				//Aqui gera a sua "lista". No caso, imprimi cada linha na tela.
				String[] a = temp.split(";");
				int i=0;
				for(String each : a)
				{
					/*if(i==0){
						nome=each;							
						System.out.println(nome);
					}*/
						if(i==1){
							data=each;
							//System.out.println(data);
                                                       // jLabel9.setText(data);
						} 
						if(i==2){
							hora=each;
							i=-1;
							//System.out.println(hora);
                                                     //   txtMelhorHora.setText(hora);
                                                        
						}
						i++;
					}						
				}
		}
		catch (FileNotFoundException el)
		{
			System.out.println("Arquivo não Encontrado!");
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}


        //MELHOR DATA
        
        try {
			//abre o arquivo
			FileReader fr = new FileReader("textando.txt");
			BufferedReader br = new BufferedReader(fr);
			String temp;
			//A cada interação, é uma linha do arquivo e atribui-a a temp
			while ((temp = br.readLine()) != null)
			{
				//Aqui gera a sua "lista". No caso, imprimi cada linha na tela.
				String[] a = temp.split(";");
				int i=0;
				for(String each : a)
				{
					/*if(i==0){
						nome=each;							
						System.out.println(nome);
					}*/
						if(i==1){
							data=each;
							//System.out.println(data);
                                                       // jLabel9.setText(data);
						} /*
						if(i==2){
							valor=each;
							i=-1;
							System.out.println(valor);
                                                        
						}*/
						i++;
					}						
				}
		}
		catch (FileNotFoundException el)
		{
			System.out.println("Arquivo não Encontrado!");
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
        
         //PEDIDOS FEITOS
        
            
            
             LineNumberReader lnrR = null;
        try {
            String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/Texto.txt");
            File file = new File(filePath);
            lnrR = new LineNumberReader(new FileReader(file));
            try {
                lnrR.skip(Long.MAX_VALUE);
            } catch (IOException ex) {
                Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
            }
            int retorno = lnrR.getLineNumber();
            int REs = retorno - 4;
            String rere = Integer.toString(REs);
            jLabel2.setText(rere);
            
            
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                lnrR.close();
            } catch (IOException ex) {
                Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            
            
            
        
        
        
        
        
        //PEDIDOS FEITOS
        File arquivo = new File ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
    
        try {
            FileReader fr = new FileReader(arquivo);
            BufferedReader br = new BufferedReader(fr);
            //String linha = br.readLine();
            String d;  //new
            
            Object[] tableLines = br.lines().toArray();
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split(";");
                
                
            }
            while((d=br.readLine())!=null){
                StringTokenizer dato = new StringTokenizer(d,";");
                Vector x = new Vector();
                while(dato.hasMoreTokens()){
                    x.addElement(dato.nextToken());
                }
              //jLabel11.setText(x.toString());
             
               
            }
            fr.close();
        } catch (Exception ex) {
            Logger.getLogger(PerfilDoCliente.class.getName()).log(Level.SEVERE, null, ex);

        }
        
        
        
        
        
       //TOTAL DE CLIENTES 
       LineNumberReader lnr = null;
        try {
            String filePath = ("C://Users/henrique matheus/Documents/NetBeansProjects/AplicacaoAnbiente/Alumnos.txt");
            File file = new File(filePath);
            lnr = new LineNumberReader(new FileReader(file));
            try {
                lnr.skip(Long.MAX_VALUE);
            } catch (IOException ex) {
                Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
            }
            int retorno = lnr.getLineNumber();
            String rere = Integer.toString(retorno);
           jLabel2.setText(rere);
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                lnr.close();
            } catch (IOException ex) {
                Logger.getLogger(TelaRelatorioCistema.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        //metodo de caucular o total
        calcular();
        
        
        
    }//GEN-LAST:event_formWindowOpened

    private void jLabel11MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseMoved
 
        // TODO add your handling code here:
         //metodo de caucular o total
          
     
          
          
    }//GEN-LAST:event_jLabel11MouseMoved

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
//Apaga  todas as linhas da tabela
while (jTable3.getModel().getRowCount() > 0) {
    ((DefaultTableModel) jTable3.getModel()).removeRow(0);
    }

//Faturamento dia 
 jLabel9.setText("Faturamento mansal");
        try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                    
                                               
                    linha.trim();
                    System.out.println(linha);
                    //Metodo de formataçao de String
                    String space = " ";
                    if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                        //Metodo quebra Strig
                    String a = linha;
	            String[] array = a.split(" ");
	            for (int ij = 0; ij < array.length; ij++){
		    System.out.println(array[0]);//Valor
                     System.out.println(array[1]);//Hora
                      System.out.println(array[2]);//Nome
                       System.out.println(array[3]);//Data
                       
                        
                       
	}
                    DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                        val.addRow(new String[]{array[3], array[1], array[2], array[0]} );
                    
                    }
                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
       calcular2();
       jLabel2.setText(""+jTable3.getRowCount());
       
       //---------------------------------CLIENTES CADDASTRADOS NO DIA------------------------
      try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/texto.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("MM-yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int contador = 0;
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");
                        
                       contador++; 
                    } 
                    jLabel4.setText(""+contador);
                    }
                          }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//Apaga  todas as linhas da tabela
while (jTable3.getModel().getRowCount() > 0) {
    ((DefaultTableModel) jTable3.getModel()).removeRow(0);
    }

//Faturamento dia 
jLabel9.setText("Faturamento de hoje");
        try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                    
                       
                                               
                    linha.trim();
                    System.out.println(linha);
                    //Metodo de formataçao de String
                    String space = " ";
                    if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                        //Metodo quebra Strig
                    String a = linha;
	            String[] array = a.split(" ");
	            for (int ij = 0; ij < array.length; ij++){
		    System.out.println(array[0]);//Valor
                     System.out.println(array[1]);//Hora
                      System.out.println(array[2]);//Nome
                       System.out.println(array[3]);//Data
                       
                        
                       
	}
                     
        
                        
                    
                    
                    DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                        val.addRow(new String[]{array[3], array[1], array[2], array[0]} );
                    
                    }
                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
calcular2();
jLabel2.setText(""+jTable3.getRowCount());


//---------------------------------CLIENTES CADDASTRADOS NO DIA------------------------
      try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/texto.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int contador = 0;
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");
                        
                       contador++; 
                    } 
                    jLabel4.setText(""+contador);
                    }
                          }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//Apaga  todas as linhas da tabela
while (jTable3.getModel().getRowCount() > 0) {
    ((DefaultTableModel) jTable3.getModel()).removeRow(0);
    }        
        
     jLabel9.setText("Faturamento semanal");
        try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("MM-yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                    
                                               
                    linha.trim();
                    System.out.println(linha);
                    //Metodo de formataçao de String
                    String space = " ";
                    if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                        //Metodo quebra Strig
                    String a = linha;
	            String[] array = a.split(" ");
	            for (int ij = 0; ij < array.length; ij++){
		    System.out.println(array[0]);//Valor
                     System.out.println(array[1]);//Hora
                      System.out.println(array[2]);//Nome
                       System.out.println(array[3]);//Data
                       
                        
                       
	}
                    DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                        val.addRow(new String[]{array[3], array[1], array[2], array[0]} );
                    
                    }
                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
       calcular2();
       jLabel2.setText(""+jTable3.getRowCount());
       
       //---------------------------------CLIENTES CADDASTRADOS NO DIA------------------------
      try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/texto.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("MM-yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int contador = 0;
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");
                        
                       contador++; 
                    } 
                    jLabel4.setText(""+contador);
                    }
                          }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
            String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
      
        int posisao = 0;
        
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    
                    String conferir = ".";
                    //metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(conferir.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                        String resultado = "";

		                                 Scanner sc = new Scanner(linha);
                                                 //  Scanner 

	                                   	while (sc.hasNext()) {

	                               		resultado += sc.next();
	                                		break;

		                                   }
                                              
		                               System.out.println(""+resultado );
                    
                                               
                  
                   //manda os valores para uma txt
                   RegistroDeCompra registroDeCompra = new RegistroDeCompra();
                   
                   registroDeCompra.setAnalise(resultado);
                   
                    try {
            JOptionPane.showMessageDialog(null, registroDeCompra.sauvado());  //Atençao
            // jTextField1.setText("");
            // texREs.setText("");
            
            
            /*   t.start();
            prgs.setValue(prgs.getValue()+10);
            
            t.stop(); */
        } catch (IOException ex) {
            Logger.getLogger(PerfilDoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
                   
                                               
                    }else{
                     System.out.println(linha+"Nã Contem a data de hoje");
                    }
                    
                    
                    
                    posisao ++;
                    System.out.println(""+posisao);
                    System.out.println(linha);
                    
                }
        
                try {
             String ffilePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File ffile = new File(ffilePath);
            
            BufferedReader brr = new BufferedReader(new FileReader(ffile));
            String rfirstLine = brr.readLine().trim();
            String[] rcolumnsName = rfirstLine.split(",");
            DefaultTableModel model = (DefaultTableModel)jTable3.getModel();
            model.setColumnIdentifiers(columnsName);

            Object[] rtableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int r = 0; r < rtableLines.length; i++)
            {
                String rline = tableLines[i].toString().trim();
                String[] datamin = rline.split(";");
                
                Integer[] valoresInt = new Integer[datamin.length];
                
                for (int j = 0; j < datamin.length; j++) {
                    valoresInt[j] = Integer.parseInt(datamin[j]);
                    //System.out.print(valoresInt[j]);
                    
                    Arrays.sort(valoresInt);
                    model.addRow(valoresInt);
                    
                    
                }
                
                
                
                 }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }     
               
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }         

     
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//Apaga  todas as linhas da tabela
while (jTable3.getModel().getRowCount() > 0) {
    ((DefaultTableModel) jTable3.getModel()).removeRow(0);
    }

        jLabel9.setText("Faturamento total");
        try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                    
                                               
                    linha.trim();
                    System.out.println(linha);
                    //Metodo de formataçao de String
                    String space = " ";
                    if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                        //Metodo quebra Strig
                    String a = linha;
	            String[] array = a.split(" ");
	            for (int ij = 0; ij < array.length; ij++){
		    System.out.println(array[0]);//Valor
                     System.out.println(array[1]);//Hora
                      System.out.println(array[2]);//Nome
                       System.out.println(array[3]);//Data
                       
                        
                       
	}
                    DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                        val.addRow(new String[]{array[3], array[1], array[2], array[0]} );
                    
                    }
                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }         
        
        
        //---------------------------------CLIENTES CADDASTRADOS NO DIA------------------------
      try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/texto.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy");
        
        jLabel8.setText(formato.format(dataSistema));
        String DataHoje = jLabel8.getText();
        String quebrador ="";
        int contador = 0;
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");
                        
                       contador++; 
                    } 
                    jLabel4.setText(""+contador);
                    }
                          }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jDateChooser2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateChooser2KeyPressed
    /*    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
      
              while (jTable3.getModel().getRowCount() > 0) {
    ((DefaultTableModel) jTable3.getModel()).removeRow(0);
    }
      
jLabel9.setText("Faturamento total");
        try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        String DataHoje =formato.format(jDateChooser1.getDate());
        //jLabel8.setText(formato.format(dataSistema));
       // String DataHoje = jLabel8.getText();
        String quebrador ="";
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje"); 
                    
                       
                                               
                    linha.trim();
                    System.out.println(linha);
                    //Metodo de formataçao de String
                    String space = " ";
                    if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                        //Metodo quebra Strig
                    String a = linha;
	            String[] array = a.split(" ");
	            for (int ij = 0; ij < array.length; ij++){
		    System.out.println(array[0]);//Valor
                     System.out.println(array[1]);//Hora
                      System.out.println(array[2]);//Nome
                       System.out.println(array[3]);//Data
                       
                        
                       
	}
                     
        
                        
                    
                    
                    DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                        val.addRow(new String[]{array[3], array[1], array[2], array[0]} );
                    
                    }
                    
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
calcular2();
jLabel2.setText(""+jTable3.getRowCount());


//---------------------------------CLIENTES CADDASTRADOS NO DIA------------------------
      try {
             String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/texto.txt");
        File file = new File(filePath);
            
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
           String[] columnsName = firstLine.split(",");
         //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);
            
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
           //     model.addRow(dataRow);
                
   
               
        //metodo para percorrer o array
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        
        String DataHoje =formato.format(jDateChooser1.getDate());
      //  jLabel8.setText(formato.format(dataSistema));
      //  String DataHoje = jLabel8.getText();
        String quebrador ="";
        int contador = 0;
        int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");
                        
                       contador++; 
                    } 
                    jLabel4.setText(""+contador);
                    }
                          }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
            
            
       }
        
        */
    }//GEN-LAST:event_jDateChooser2KeyPressed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
      jLabel3.setText(jTable3.getModel().getValueAt(jTable3.getSelectedRow(),0).toString()); // Nome
      jLabel5.setText(jTable3.getModel().getValueAt(jTable3.getSelectedRow(),1).toString()); //Pedido
      jLabel6.setText(jTable3.getModel().getValueAt(jTable3.getSelectedRow(),2).toString()); //valor total
      jLabel7.setText(jTable3.getModel().getValueAt(jTable3.getSelectedRow(),3).toString()); //rua  
       
        
    }//GEN-LAST:event_jTable3MouseClicked

    private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
        
        
         
        if(jTable3.getSelectedRow() != -1){
        
        System.out.print("Linha selecionada: "+jTable3.getSelectedColumn());
            
        DefaultTableModel dmz = (DefaultTableModel)jTable3.getModel();
        dmz.removeRow(jTable3.getSelectedRow());
 
        File file = new File("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
       
        try {
        FileReader fr = new FileReader(file); 
        BufferedReader br = new BufferedReader(fr);
       
        
        String linha = br.readLine();
        ArrayList<String> salvar = new ArrayList();
        while(linha != null){
            

                    
        String DATA  = jLabel3.getText();
        String HORA = jLabel5.getText();
        String Nome = jLabel6.getText();
        String Valorgasto = jLabel7.getText();
            
            
 
            if(linha.equals(Valorgasto+" "+HORA+" "+Nome+" "+DATA+";") == false){
                salvar.add(linha);
                JOptionPane.showInputDialog(Valorgasto+" "+HORA+" "+Nome+" "+DATA+";");
            }
            linha = br.readLine();
        }

        br.close();
        fr.close();
        FileWriter fw2 = new FileWriter(file, true);
        fw2.close();
        
        FileWriter fw = new FileWriter(file);
        BufferedWriter bw = new BufferedWriter(fw);
        
            for (int i = 0; i < salvar.size(); i++) {
            bw.write( salvar.get(i) );
            bw.newLine();
            
            }
            bw.close();
            fw.close();
        } catch (IOException e) {
        }
        
        
         }else{
            JOptionPane.showMessageDialog(null, "Favor selecionar uma linha");
        } 
        
               
       }
        
       
        
    }//GEN-LAST:event_jTable3KeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        //Faturamento dia
        while (jTable3.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTable3.getModel()).removeRow(0);
        }

        jLabel9.setText("Faturamento especifico");
        try {
            String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/textando.txt");
            File file = new File(filePath);

            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
            String[] columnsName = firstLine.split(",");
            //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);

            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
                //     model.addRow(dataRow);

                //metodo para percorrer o array
                Date dataSistema = new Date();
                SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
                String DataHoje = jFormattedTextField1.getText();
                //jLabel8.setText(formato.format(dataSistema));
                // String DataHoje = jLabel8.getText();
                String quebrador ="";
                int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");

                        linha.trim();
                        System.out.println(linha);
                        //Metodo de formataçao de String
                        String space = " ";
                        if(linha.toLowerCase().contains(space.toLowerCase()) == true){
                            //Metodo quebra Strig
                            String a = linha;
                            String[] array = a.split(" ");
                            for (int ij = 0; ij < array.length; ij++){
                                System.out.println(array[0]);//Valor
                                System.out.println(array[1]);//Hora
                                System.out.println(array[2]);//Nome
                                System.out.println(array[3]);//Data

                            }

                            DefaultTableModel val = (DefaultTableModel) jTable3.getModel();
                            val.addRow(new String[]{array[3], array[1], array[2], array[0]} );

                        }

                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
        calcular2();
        jLabel2.setText(""+jTable3.getRowCount());

        //---------------------------------CLIENTES CADDASTRADOS NO DIA------------------------
        try {
            String filePath = ("C:\\Arquivos de Programas/Gestão de Clientes/texto.txt");
            File file = new File(filePath);

            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstLine = br.readLine().trim();
            String[] columnsName = firstLine.split(",");
            //   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            //  model.setColumnIdentifiers(columnsName);

            Object[] tableLines = br.lines().toArray();
            //model.addRow(tableLines);

            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataMax = line.split(";");
                //String[] dataRow = line.split(";");
                //     model.addRow(dataRow);

                //metodo para percorrer o array
                Date dataSistema = new Date();
                SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");

                String DataHoje = jFormattedTextField1.getText();
                //  jLabel8.setText(formato.format(dataSistema));
                //  String DataHoje = jLabel8.getText();
                String quebrador ="";
                int contador = 0;
                int posisao = 0;
                for (int j = 0; j < dataMax.length; j++) {
                    String  linha = dataMax[posisao];
                    //Metodo para aparecer so o valor
                    if(linha.toLowerCase().contains(DataHoje.toLowerCase()) == true){
                        System.out.println(linha+"Contem a data de hoje");

                        contador++;
                    }
                    jLabel4.setText(""+contador);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PaginaUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorioCistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorioCistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorioCistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorioCistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaRelatorioCistema().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel txtPiorHora2;
    // End of variables declaration//GEN-END:variables
}
